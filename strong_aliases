# ~/.strong_aliases 1.2.4
# Author:  Dmitry Vinichenko <circlehook.pro at gmail.com>
# Website: https://github.com/circlehook/bash-strong-cli
# Licence: LGPLv2
# One command launch:
#   curl https://raw.githubusercontent.com/circlehook/bash-strong-cli/refs/heads/main/cli.sh | bash && source ~/.bashrc && cli
# Usage: 
#   cli 
#   cli update
#
# V1.0      26 Dec 2024     Initial release
# V1.1      26 Dec 2024     cli function
# V1.2      27 Dec 2024     create ctl, sql, log functions

CLI_URL="https://raw.githubusercontent.com/circlehook/bash-strong-cli/refs/heads/main/strong_aliases";

# https://github.com/BMDan/tuning-primer.sh
MYSQL_TUNING_URL="https://raw.githubusercontent.com/BMDan/tuning-primer.sh/main/tuning-primer.sh"

alias rgb='ccze -A';
alias tailf='tail -f';

_cli_logo(){
 echo -e '\e[95m'
 echo -e '   _____   _______   _____     ____    _   _    _____             _____   _        _____   '
 echo -e '  / ____| |__   __| |  __ \   / __ \  | \ | |  / ____|           / ____| | |      |_   _|  '
 echo -e ' | (___      | |    | |__) | | |  | | |  \| | | |  __   ______  | |      | |        | |    '
 echo -e '  \___ \     | |    |  _  /  | |  | | | . ` | | | |_ | |______| | |      | |        | |    '
 echo -e '  ____) |    | |    | | \ \  | |__| | | |\  | | |__| |          | |____  | |____   _| |_   '
 echo -e ' |_____/     |_|    |_|  \_\  \____/  |_| \_|  \_____|           \_____| |______| |_____|  '
 echo -e '\e[0m\e[37m                          github.com/circlehook/bash-strong-cli \e[0m'
};
_cli_help(){ 
 clear
 CLI_VER_NEW=$(wget -O - $CLI_URL 2>/dev/null | head -n 1 | awk '{print $3}');
 CLI_VER=$(cat ~/.strong_aliases 2>/dev/null | head -n 1 | awk '{print $3}');
 CLI_WARN="";
 [ "$CLI_VER" != "$CLI_VER_NEW" ] && CLI_WARN="$(tput setaf 3)  Needs to be updated to version $CLI_VER_NEW\n  Run: $1 update$(tput sgr0)\n"; 
 echo -e " $(_cli_logo) 

 ~/.strong_aliases function for aliases management.  Version: $CLI_VER
$CLI_WARN
Usage: 
  $1 update      : update ~/.strong_aliases && source ~/.bashrc
  $1 edit        : edit   ~/.strong_aliases
  $1 reload      : source ~/.bashrc 
  $1 fresh       : clear  ~/.bash_history from words: cli sql ctl
  $1 drop        : clear  ~/.bash_history && remove ~/.strong_aliases
  $1 board       : open TMUX session \"board\". Press Ctrl+B then D to detach session

Functions list:
  ctl             :  System  Toolkit 
  sql             :  Mysql   Toolkit
 

Aliases:
  [stdout] | rgb  :  Colorize [stdout] with CCZE (tailf file.log | rgb)

";
};
_cli_fresh(){   history -c; sed -i '/cli\|sql\|ctl/d' ~/.bash_history; };
_cli_board(){
  echo '
    bind-key v split-window -h
    bind-key h split-window -v
    select-layout even-vertical
    select-layout even-horizontal
    split-window -v
    split-window -h
  ' > /root/.tmux-panels.conf 
  tmux ls | grep -q "board" && { tmux attach -t board || true; } || { tmux new -d -s board && tmux source /root/.tmux-panels.conf && tmux attach -t board; }
 };
cli(){
  if [ -n "$1" ]; then
    case "$1" in
      "help")   _cli_help $FUNCNAME;; 
      "edit")   command -v nano &> /dev/null && nano "~/.strong_aliases" || vi "~/.strong_aliases";;
      "update") wget -O - $CLI_URL > ~/.strong_aliases; source ~/.bashrc; cli;;
      "reload") source ~/.bashrc;;
      "fresh")  _cli_fresh;;
      "board")  _cli_board;;
      "drop") _cli_fresh; rm -rf ~/.strong_aliases; unset cli sql ctl;;
      *) _cli_help $FUNCNAME;; 
    esac 
  else
    _cli_help $FUNCNAME;
  fi
};
_ctl_title(){ echo -e "\n$(tput setaf 6)Usage: $1 help$(tput sgr0)\n"; };
_ctl_help(){
  echo -e " 
~/.strong_aliases function. System tools management

Usage: 
  $1 list-fail                   :   (systemctl)   list fail services
  $1 list                        :   (systemctl)   list services + installed unit files
  $1 %               [string]    :   (systemctl)  (list services + installed unit files) | grep [string]
  $1 tree                        :   (systemctl)  tree services  
  
  $1 [=|+|-|@]       [service]   :   (systemctl)  status/start/stop/restart [service]  
  $1 [boot|on|off]   [service]   :   (systemctl)  check/enable/disable/ start on boot  
  $1 unit            [service]   :   (systemctl edit --full [service]) (needs daemon-reload)
  $1 reload                      :   (systemctl daemon-reload)

  $1 name            <hostname>  :   (hostnamectl set-hostname <hostname>) OR (hostnamectl | grep hostname) 
  $1 time            <time>      :   (timedatectl set-time     <time>    ) OR (timedatectl | grep Local)
  $1 zone            <timezone>  :   (timedatectl set-timezone <timezone>) OR (timedatectl | grep zone)
  $1 zones           <string>    :   (timedatectl list-timezones) OR (timedatectl list-timezones | grep -i <string>) 
 
Examples:
  $1 % fire     OR  $1 list | grep fire   
  $1 = nginx    OR  $1 status nginx  (original systemctl option STATUS)
  $1 unit nginx AND $1 reload

  $1 name       OR  $1 name example.com
  $1 zones      OR  $1 zones euro
  $1 zone       OR  $1 zone Europe/Kyiv
  $1 time       OR  $1 time '2024-11-01 12:34:00'

";
};
ctl(){
  if [ -n "$1" ]; then
    case "$1" in
      "help")        _ctl_help $FUNCNAME;; 
      "tree")        systemctl list-dependencies;; 
      "reload")      systemctl daemon-reload;; 
      "list-fail")   systemctl -at service | grep -E 'fail|not-found';; 
      "list")        systemctl -at service --no-pager; systemctl list-unit-files --no-pager;;
      "%")           [ -n "$2" ] && systemctl -at service | grep $2; systemctl list-unit-files | grep $2;; 
      "unit")        [ -n "$2" ] && systemctl edit --full $2;; 
      "boot")        [ -n "$2" ] && systemctl is-enabled $2;; 
      "on")          [ -n "$2" ] && systemctl enable $2;; 
      "off")         [ -n "$2" ] && systemctl disable $2;; 
      "=")           [ -n "$2" ] && systemctl status $2;; 
      "+")           [ -n "$2" ] && systemctl start $2;   echo -e "\nService started.  \n"; systemctl status $2;; 
      "-")           [ -n "$2" ] && systemctl stop $2;    echo -e "\nService stoped.   \n"; systemctl status $2;; 
      "@")           [ -n "$2" ] && systemctl restart $2; echo -e "\nService restarted.\n"; systemctl status $2;; 
      "name")        [ -n "$2" ] && hostnamectl set-hostname $2 || hostnamectl | grep hostname;; 
      "zone")        [ -n "$2" ] && timedatectl set-timezone $2 || timedatectl | grep zone;; 
      "time")        [ -n "$2" ] && timedatectl set-time $2 || timedatectl | grep Local;; 
      "zones")       [ -n "$2" ] && timedatectl list-timezones | grep -i $2 || timedatectl list-timezones;; 
      *) _ctl_title $FUNCNAME && systemctl "$@";; 
    esac 
  else
    _ctl_help $FUNCNAME;
  fi
};

_log_title(){ echo -e "\n$(tput setaf 6)Usage: $1 help$(tput sgr0)\n"; };
_log_help(){
  echo -e " 
~/.strong_aliases function. Logs Toolkit

Usage: 
  $1 size                            : (journalctl)(du) journalctl disk usage + /var/log size
  $1 clear  [mb]                     : (journalctl) clearing journal up to [mb]  
  $1 view   [hours]                  : (journalctl) last [hours] journal   
  $1 errors [hours]                  : (journalctl) last [hours] journal errors   
  $1 period [min-hours] [max-hours]  : (journalctl) journal entries between hours
  $1 boots                           : (journalctl) show list boots
  $1 sessions                        : (last) show listing of last logged in users in 30 days

Examples:
  $1 period 10 11
  $1 --since \"2024-01-14 00:11:00\" --until \"2024-01-14 00:13:00\"

";
};
log(){
  if [ -n "$1" ]; then
    case "$1" in
      "help")   _log_help $FUNCNAME;; 
      "size")   journalctl --disk-usage; du -h --max-depth=1 /var/log | awk '$1 != "0"' | sort -h;; 
      "clear")  [ -n "$2" ] && journalctl --vacuum-size=$2M || journalctl --vacuum-size=0M;; 
      "view")   [ -n "$2" ] && journalctl --since "$2 hours ago";; 
      "errors")  [ -n "$2" ] && journalctl -p err -b --since "$2 hour ago";; 
      "period") journalctl --since "$3 hour ago" --until "$2 hour ago";; 
      "boots")  journalctl --list-boots;; 
      "sessions") last | grep $(date -d "last month" +"%b");; 
      *) _log_title $FUNCNAME && journalctl "$@";; 
    esac 
  else
    _log_help $FUNCNAME;
  fi
};

_sql_title(){ echo -e "\n$(tput setaf 6)Usage: sql help$(tput sgr0)\n\n"; }; 
_sql_memory(){ IDS=($(find "/proc/$(ps aux | grep $1 | grep -v grep | awk '{print $2}')/task" -maxdepth 1 -type d ! -name 'task' -exec basename {} \;)); MEMORY=0; for ID in "${IDS[@]}"; do MEMORY=$(expr $(ps -o rss= -p $ID) + $MEMORY); done; echo $((MEMORY / 1024)); }; 
_sql_dbsize(){ mysql -e 'SELECT table_schema AS `Database`, ROUND(SUM(data_length + index_length) / 1024 / 1024) AS `Size (MB)` FROM information_schema.tables GROUP BY table_schema HAVING `Size (MB)` >= 0 UNION SELECT schema_name AS `Database`, 0 AS `Size (MB)` FROM information_schema.schemata WHERE schema_name NOT IN (SELECT table_schema FROM information_schema.tables) ORDER BY `Size (MB)` DESC;'; }; 
_sql_tables(){ mysql -e "SELECT table_name, COUNT(*) AS row_count FROM information_schema.tables WHERE table_schema = '$1' GROUP BY table_name ORDER BY row_count ASC;"; }; 
_sql_makezabbix(){ PASSWORD=$(openssl rand -base64 12); mysql -e "DROP USER IF EXISTS 'zabbix'@'localhost'; DROP USER IF EXISTS 'zabbix'@'127.0.0.1'; CREATE USER 'zabbix'@'localhost' IDENTIFIED BY '$PASSWORD';CREATE USER 'zabbix'@'127.0.0.1' IDENTIFIED BY '$PASSWORD'; GRANT ALL ON *.* TO 'zabbix'@'localhost';GRANT ALL ON *.* TO 'zabbix'@'127.0.0.1';flush privileges;"; mkdir -p /etc/zabbix; echo -e "[client]\nuser=zabbix\npassword=$PASSWORD" > /etc/zabbix/.my.cnf;cat /etc/zabbix/.my.cnf; };
_sql_makebareos(){ PASSWORD=$(openssl rand -base64 12); mysql -e "DROP USER IF EXISTS 'bareos'@'localhost'; CREATE USER 'bareos'@'localhost' IDENTIFIED BY '$PASSWORD'; GRANT USAGE ON *.* TO 'bareos'@'localhost'; GRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, PROCESS, EXECUTE, TRIGGER ON *.* TO 'bareos'@'localhost'; FLUSH PRIVILEGES;"; echo -e "[client]\nusername=bareos\npassword=$PASSWORD" > /root/.bareos.cnf;cat /root/.bareos.cnf; };
_sql_help(){ echo "
~/.strong_aliases function. Mysql Toolkit (mysql, mysqldump).

Usage:
 $1 memory                  : show RAM Mysql usage
 $1 bases                   : show databases with size
 $1 create [dbname]         : create database
 $1 base   [dbname]         : show database owners
 $1 tables [dbname]         : show database tables 
 $1 drop   [dbname]         : drop database 
 $1 dump   [dbname]         : dump database to this directory on \"[dbname].sql\"
 $1 clone  [dbname] [newdb] : create database \"newdb\" + copy database \"dbname\" to \"newdb\" 
  
 $1 users                                        : show users
 $1 makeowner  [user]<@host> [password] [dbname] : create user + grant all privileges on the db
 $1 makereader [user]<@host> [password] [dbname] : create user + grant select         on the db
 $1 user       [user]<@host>                     : show user grants 
 $1 password   [user]<@host> [password]          : reset user password
 $1 dropuser   [user]<@host>                     : drop user
 
 $1 makezabbix  : create mysql zabbix user + write access to /etc/zabbix/.my.cnf
 $1 makebareos  : create mysql bareos user + write access to /root/.bareos.cnf
 $1 tuning      : running a script from the repository https://github.com/BMDan/tuning-primer.sh

 "; };

# $1 createuser  [user]@host [password]           : create user
# $1 grantall    [user]@host [dbname]             : grant all privileges to the user on the db 

sql(){
  MESSAGE_CAPTCHA="WARNING!!! Enter \"DROP\" to drop database: ";
  if ! mysql -e "SELECT 1;" &>/dev/null; then
    echo "Password required, file /root/.my.cnf may not be found. Using the function in this mode is not possible."
  else
    if [ $# -eq 0 ]; then
        #_sql_title && mysql;
        _sql_help $FUNCNAME;
    else
      case "$1" in
      "memory")    echo -e "\nUsage RAM: $(_sql_memory "mysql") (mb)\n";;
      "bases")     _sql_dbsize;;
      "create")    [ -n "$2" ] && mysql -e "CREATE DATABASE $2;";;
      "base")      [ -n "$2" ] && mysql -e "SELECT user, host, db FROM mysql.db WHERE db = '$2';";;
      "tables")    _sql_tables "$2";;
      "variables") _sql_variables;;
      "drop")   [ -n "$2" ] && read -p "$MESSAGE_CAPTCHA" captcha && [ "$captcha" = "DROP" ] && mysql -e "DROP DATABASE $2;" && sql bases || echo "FALSE";;
      "dump")     [ -n "$2" ] && mysqldump "$2" > "$2.sql";;
      #"copy")     [ $# -ge 3 ] && mysql -e "DROP DATABASE IF EXISTS $3; CREATE DATABASE $3;"; mysqldump "$2" | mysql "$3";;
      "clone")     [ $# -ge 3 ] && mysql -e "CREATE DATABASE $3;"; mysqldump "$2" | mysql "$3";;
      "users")  mysql -e "SELECT USER,Host FROM mysql.user;";;
      "makeowner")  [ $# -ge 4 ] && mysql -e "CREATE USER $2 IDENTIFIED BY '$3';GRANT ALL PRIVILEGES ON $4 . * TO $2;FLUSH PRIVILEGES;";;
      "makereader") [ $# -ge 4 ] && mysql -e "CREATE USER $2 IDENTIFIED BY '$3';GRANT SELECT ON $4 . * TO $2;FLUSH PRIVILEGES;";;
      #"createuser") [ $# -ge 3 ] && mysql -e "CREATE USER $2 IDENTIFIED BY '$3';";;
      #"grantall") [ $# -ge 3 ] && mysql -e "GRANT ALL PRIVILEGES ON $3 . * TO $2;FLUSH PRIVILEGES;";;
      "user")     [ -n "$2" ] && mysql -e "SHOW GRANTS FOR $2;";;
      "password") [ -n "$2" ] && mysql -e "ALTER USER $2 IDENTIFIED BY '$3';";;
      "dropuser") [ -n "$2" ] && mysql -e "DROP USER $2;";;
      "tuning")   curl -L $MYSQL_TUNING_URL | bash;;
      "makezabbix") _sql_makezabbix;;
      "makebareos") _sql_makebareos;;
      "help")     _sql_help $FUNCNAME;;
      *)          _sql_title && mysql "$@";;
      esac
    fi
  fi
};
