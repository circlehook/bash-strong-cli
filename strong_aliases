# ~/.strong_aliases 1.4
# Author:  Dmitry Vinichenko <circlehook.pro at gmail.com>
# Website: https://github.com/circlehook/bash-strong-cli
# Docs: https://github.com/circlehook/bash-strong-cli/blob/main/README.md
# Licence: LGPLv2
# One command launch:
#   curl https://raw.githubusercontent.com/circlehook/bash-strong-cli/refs/heads/main/install.sh | bash && source ~/.bashrc && cli
# Usage: 
#   cli 
#   cli update
#
# V1.0      26 Dec 2024     Initial release
# V1.1      26 Dec 2024     cli function
# V1.2      27 Dec 2024     create ctl, sql, log functions
# V1.3      28 Dec 2024     ngx, net, dsk, note function


CLI_URL="https://raw.githubusercontent.com/circlehook/bash-strong-cli/refs/heads/main/strong_aliases";

# https://github.com/BMDan/tuning-primer.sh
MYSQL_TUNING_URL="https://raw.githubusercontent.com/BMDan/tuning-primer.sh/main/tuning-primer.sh"
# https://github.com/pixelb/ps_mem/
RAM_COUNTER_URL="https://raw.githubusercontent.com/pixelb/ps_mem/refs/heads/master/ps_mem.py";

# My utils
UTILS_BACKUP="https://raw.githubusercontent.com/circlehook/bash-strong-cli/refs/heads/main/files/backup.sh";
MAN_URL="https://raw.githubusercontent.com/circlehook/bash-strong-cli/refs/heads/main/manuals";

alias rgb='ccze -A';
alias tailf='tail -f';

_cli_logo(){
 echo -e '\e[95m'
echo '  ____    _                                       ____   _       ___   '
echo ' / ___|  | |_   _ __    ___    _ __     __ _     / ___| | |     |_ _|   '
echo " \___ \  | __| | '__|  / _ \  | '_ \   / _\` |   | |     | |      | |    "
echo '  ___) | | |_  | |    | (_) | | | | | | (_| |   | |___  | |___   | |    '
echo ' |____/   \__| |_|     \___/  |_| |_|  \__, |    \____| |_____| |___|   '
echo '                                       |___/                            ' 
 echo -e '\e[0m\e[37m                github.com/circlehook/bash-strong-cli \e[0m'
};
_cli_help(){ 
 clear
 CLI_VER_NEW=$(wget -O - $CLI_URL 2>/dev/null | head -n 1 | awk '{print $3}');
 CLI_VER=$(cat ~/.strong_aliases 2>/dev/null | head -n 1 | awk '{print $3}');
 CLI_WARN="";
 [ "$CLI_VER" != "$CLI_VER_NEW" ] && CLI_WARN="$(tput setaf 3)  Needs to be updated to version $CLI_VER_NEW\n  Run: $1 update$(tput sgr0)\n"; 
 echo -e " $(_cli_logo) 

 ~/.strong_aliases function for aliases management.  Version: $CLI_VER
$CLI_WARN
Usage: 
  $1 update      : update ~/.strong_aliases && source ~/.bashrc
  $1 edit        : edit   ~/.strong_aliases
  $1 reload      : source ~/.bashrc 
  $1 fresh       : clear  ~/.bash_history from words: cli sql ctl log
  $1 drop        : clear  ~/.bash_history && remove ~/.strong_aliases
  $1 board       : open TMUX session \"board\". Press Ctrl+B then D to detach session

Functions list:
  ctl             :  System  Toolkit 
  sql             :  Mysql   Toolkit
  log             :  Logs    Toolkit 
  ngx             :  Nginx   Toolkit
  dsk             :  Disk    Toolkit
  net             :  Network Toolkit
  note            :  Network txt viewer

Aliases:
  [stdout] | rgb  :  Colorize [stdout] with CCZE (tailf file.log | rgb)

";
};
_cli_fresh(){   history -c; sed -i '/cli\|sql\|ctl\|log\|ngx\|net\|dsk\|note/d' ~/.bash_history;};
_cli_board(){
  echo '
    bind-key v split-window -h
    bind-key h split-window -v
    select-layout even-vertical
    select-layout even-horizontal
    split-window -v
    split-window -h
  ' > /root/.tmux-panels.conf 
  tmux ls | grep -q "board" && { tmux attach -t board || true; } || { tmux new -d -s board && tmux source /root/.tmux-panels.conf && tmux attach -t board; }
 };
cli(){
  if [ -n "$1" ]; then
    case "$1" in
      "help")   _cli_help $FUNCNAME;; 
      "edit")   command -v nano &> /dev/null && nano "~/.strong_aliases" || vi "~/.strong_aliases";;
      "update") wget -O - $CLI_URL > ~/.strong_aliases; source ~/.bashrc; cli;;
      "reload") source ~/.bashrc;;
      "fresh")  _cli_fresh; unset PASSWORD;;
      "board")  _cli_board;;
      "drop") _cli_fresh; rm -rf ~/.strong_aliases; source ~/.bashrc;;;
      *) _cli_help $FUNCNAME;; 
    esac 
  else
    _cli_help $FUNCNAME;
  fi
};

_note_get(){ 
  if [ -n "$1" ]; then
    http_status=$(curl -s -o /dev/null -w "%{http_code}" "$MAN_URL/$1.md")
    if [ $http_status -eq 200 ]; then
      echo && echo -e "Manual are loading..." && echo; #sleep 1;
      curl -sSL "$MAN_URL/$1.md" | grep -v '```' | cat; echo -e "\n";
    else
      echo -e "Заметка недоступна($http_status).\n"
    fi
  fi
};
_note_title(){ echo -e "\n$(tput setaf 6)Usage: $1 help$(tput sgr0)\n"; };
_note_help(){
  echo -e "
~/.strong_aliases function. Network txt viewer  

Usage: 
  $1 [file-name]     :   (curl) display without save /bash-strong-cli/tree/main/manuals/[file-name].md
                       :    - / -  Available file list: 
                       :    - / -  main

Examples:
  $1 main
  $1 main | rgb

";};
note(){
  if [ -n "$1" ]; then
    case "$1" in
      "help") _note_help $FUNCNAME;; 
      *)      _note_get "$1";;
    esac 
  else
    _note_help $FUNCNAME;
  fi
};

_ctl_title(){ echo -e "\n$(tput setaf 6)Usage: $1 help$(tput sgr0)\n"; };
_ctl_help(){
  echo -e " 
~/.strong_aliases function. System tools management

Usage: 
  $1 list-fail                   :   (systemctl)   list fail services
  $1 list                        :   (systemctl)   list services + installed unit files
  $1 %               [string]    :   (systemctl)  (list services + installed unit files) | grep [string]
  $1 tree                        :   (systemctl)  tree services  
  
  $1 [=|+|-|@]       [service]   :   (systemctl)  status/start/stop/restart [service]  
  $1 [boot|on|off]   [service]   :   (systemctl)  check/enable/disable/ start on boot  
  $1 unit            [service]   :   (systemctl edit --full [service]) (needs daemon-reload)
  $1 reload                      :   (systemctl daemon-reload)

  $1 name            <hostname>  :   (hostnamectl set-hostname <hostname>) OR (hostnamectl | grep hostname) 
  $1 time            <time>      :   (timedatectl set-time     <time>    ) OR (timedatectl | grep Local)
  $1 zone            <timezone>  :   (timedatectl set-timezone <timezone>) OR (timedatectl | grep zone)
  $1 zones           <string>    :   (timedatectl list-timezones) OR (timedatectl list-timezones | grep -i <string>) 
 
Examples:
  $1 % fire     OR  $1 list | grep fire   
  $1 = nginx    OR  $1 status nginx  (original systemctl option STATUS)
  $1 unit nginx AND $1 reload

  $1 name       OR  $1 name example.com
  $1 zones      OR  $1 zones euro
  $1 zone       OR  $1 zone Europe/Kyiv
  $1 time       OR  $1 time '2024-11-01 12:34:00'

";
};
ctl(){
  if [ -n "$1" ]; then
    case "$1" in
      "help")        _ctl_help $FUNCNAME;; 
      "tree")        systemctl list-dependencies;; 
      "reload")      systemctl daemon-reload;; 
      "list-fail")   systemctl -at service | grep -E 'fail|not-found';; 
      "list")        systemctl -at service --no-pager; systemctl list-unit-files --no-pager;;
      "%")           [ -n "$2" ] && systemctl -at service | grep $2; systemctl list-unit-files | grep $2;; 
      "unit")        [ -n "$2" ] && systemctl edit --full $2;; 
      "boot")        [ -n "$2" ] && systemctl is-enabled $2;; 
      "on")          [ -n "$2" ] && systemctl enable $2;; 
      "off")         [ -n "$2" ] && systemctl disable $2;; 
      "=")           [ -n "$2" ] && systemctl status $2;; 
      "+")           [ -n "$2" ] && systemctl start $2;   echo -e "\nService started.  \n"; systemctl status $2;; 
      "-")           [ -n "$2" ] && systemctl stop $2;    echo -e "\nService stoped.   \n"; systemctl status $2;; 
      "@")           [ -n "$2" ] && systemctl restart $2; echo -e "\nService restarted.\n"; systemctl status $2;; 
      "name")        [ -n "$2" ] && hostnamectl set-hostname $2 || hostnamectl | grep hostname;; 
      "zone")        [ -n "$2" ] && timedatectl set-timezone $2 || timedatectl | grep zone;; 
      "time")        [ -n "$2" ] && timedatectl set-time $2 || timedatectl | grep Local;; 
      "zones")       [ -n "$2" ] && timedatectl list-timezones | grep -i $2 || timedatectl list-timezones;; 
      *) _ctl_title $FUNCNAME && systemctl "$@";; 
    esac 
  else
    _ctl_help $FUNCNAME;
  fi
};

_log_title(){ echo -e "\n$(tput setaf 6)Usage: $1 help$(tput sgr0)\n"; };
_log_help(){
  echo -e " 
~/.strong_aliases function. Logs Toolkit

Usage: 
  $1 size                            : (journalctl)(du) journalctl disk usage + /var/log size
  $1 clear  [mb]                     : (journalctl) clearing journal up to [mb]  
  $1 view   [hours]                  : (journalctl) last [hours] journal   
  $1 errors [hours]                  : (journalctl) last [hours] journal errors   
  $1 period [min-hours] [max-hours]  : (journalctl) journal entries between hours
  $1 boots                           : (journalctl) show list boots
  $1 sessions                        : (last) show listing of last logged in users in 30 days

Examples:
  $1 period 10 11
  $1 --since \"2024-01-14 00:11:00\" --until \"2024-01-14 00:13:00\"

";
};
log(){
  if [ -n "$1" ]; then
    case "$1" in
      "help")   _log_help $FUNCNAME;; 
      "size")   journalctl --disk-usage; du -h --max-depth=1 /var/log | awk '$1 != "0"' | sort -h;; 
      "clear")  [ -n "$2" ] && journalctl --vacuum-size=$2M || journalctl --vacuum-size=0M;; 
      "view")   [ -n "$2" ] && journalctl --since "$2 hours ago";; 
      "errors")  [ -n "$2" ] && journalctl -p err -b --since "$2 hour ago";; 
      "period") journalctl --since "$3 hour ago" --until "$2 hour ago";; 
      "boots")  journalctl --list-boots;; 
      "sessions") last | grep $(date -d "last month" +"%b");; 
      *) _log_title $FUNCNAME && journalctl "$@";; 
    esac 
  else
    _log_help $FUNCNAME;
  fi
};

_dsk_help() { echo -e "\n~/.strong_aliases function. Disk Toolkit

 Usage: 
  $1 info           : (smartctl)   Disk information
  $1 free           : (df -m)      Free disk space online
  $1 size    [path] : (du -d 1 -h) Top 10 largest directories
  $1 save    [path] : (cp -r)      Copy    [path] to /usr/bac/\$(basename [path])-Y-m-d-HM/
  $1 tar     [path] : (tar -cvf)   Archive [path] to      /../\$(basename [path]).tar
  $1 gz      [path] : (tar -czvf)  Archive [path] to      /../\$(basename [path]).tar.gz
  $1 zip     [path] : (zip -r)     Archive [path] to      /../\$(basename [path]).zip
  $1 unpack  [file] : (tar|gunzip|unzip)  Unpacking any archive (tar|gz|tar.gz|zip)
  
  $1 send                                                     : (rsync) Extended help
  $1 send     [path] [user@host]<:port><:dst_path> <excludes> : (rsync) Send [path] to the host
  $1 send-bx1 [path] [user@host]<:port><:dst_path> <excludes> :  - / -  with bx excludes (backup,cache)
  $1 send-bx2 [path] [user@host]<:port><:dst_path> <excludes> :  - / -  with bx excludes (backup,cache,configs)

 Example: 
  $1 send file.tar root@1.2.3.4               (send to /tmp/upload) 
  $1 send .        root@1.2.3.4               (send this DIR to /tmp/upload) 
  $1 send .        root@1.2.3.4:/var/www      (send this DIR to /var/www)
  $1 send .        root@1.2.3.4:2222:/var/www (not default port)
  $1 send .        root@1.2.3.4:/vaw/www/USER/data/www/DOMAIN.COM/ \"app/etc/env.php\"
  $1 send-bx1 /home/bitrix/www root@1.2.3.4:/home/bitrix/www
  $1 send-bx2 /home/bitrix/www root@1.2.3.4:2222:/home/bitrix/www
"; };
_dsk_size(){ du -h --max-depth=1 $1|sort -h|tail -n 11; };
_dsk_online(){ watch -d df -m -x tmpfs -x overlay -x devtmpfs; };
_dsk_save(){ 
   DIR_NAME=$(basename "$1"); PATH_FULL="/usr/bac/$DIR_NAME-$(date +%Y-%m-%d-%H%M)"; 
   [ ! -d "$PATH_FULL" ] && mkdir -p "$PATH_FULL" || rm -rf "$PATH_FULL"; cp -r "$1/" "$PATH_FULL"; du -d 0 -h "$PATH_FULL"; ls -la /usr/bac | grep "$DIR_NAME"; 
};
_dsk_tar(){ tar -cvf $(dirname "$1")/$(basename "$1").tar "$1"; };
_dsk_gz(){ tar -czvf $(dirname "$1")/$(basename "$1").tar.gz "$1"; };
_dsk_zip(){ zip -r $(dirname "$1")/$(basename "$1").zip "$1"; };
_dsk_unpack(){
  if [[ "$1" =~ \.tar\.gz$ ]]; then
        tar -xzvf "$1"
    elif [[ "$1" =~ \.tar$ ]]; then
        tar -xvf "$1"
    elif [[ "$1" =~ \.gz$ ]]; then
        gunzip "$1"
    elif [[ "$1" =~ \.zip$ ]]; then
        unzip "$1"
    else
        echo "Unknown archive format: $1"
    fi
};
_dsk_info(){ 
  echo;
  for DISK in /dev/sd?; do [ -e "$DISK" ] && smartctl -a $DISK | awk '/test result/ {test_result=$NF} /Power_On_Hours/ {print $2, $NF/24, test_result}'; done;
  for DISK in /dev/nvme???; do [ -e "$DISK" ] && smartctl -a $DISK | grep -E "Temperature:|Percentage Used:"; done; 
  echo;
  cat /proc/mdstat;
};
_dsk_send(){
  if [ "$#" -eq 1 ]; then
   _dsk_notes;
  else
   PORT="22";
   SRC_PATH=$2;
   ROUTE=$3;
   EXCLUDES_ARG=$4;
   EXCLUDE_STR="";
   
   OLD_IFS=$IFS;
   #[[ ! -z "$EXCLUDES_ARG" ]] && EXCLUDES_STR=("${EXCLUDES_ARG[@]}");
   IFS=' ' read -ra EXCLUDES <<< "$4"
   for EXCLUDE in "${EXCLUDES[@]}"; do
     EXCLUDE_STR+="--exclude='$EXCLUDE' "
     echo -e "$(tput setaf 4)--exclude='$EXCLUDE'$(tput sgr0)";
   done
 
   IFS=":"; 
   [[ $ROUTE == *:*:* ]] && read -r ADDRESS PORT DST_PATH <<< "$ROUTE" || read -r ADDRESS DST_PATH <<< "$ROUTE";
   IFS=$OLD_IFS;
     
   [ -z "$DST_PATH" ] && DST_PATH="/tmp/upload/"
   echo -e "\n$(tput setaf 6)Address: $ADDRESS:$DST_PATH\nPort:   $PORT$(tput sgr0)\n";
   eval "rsync -avzhP -e \"ssh -p $PORT\" $EXCLUDE_STR $SRC_PATH $ADDRESS:$DST_PATH";
  fi
};
_dsk_send_bx1(){
  _dsk_send "$@" "bitrix/backup/ bitrix/cache/ bitrix/managed_cache/"
};
_dsk_send_bx2(){
  _dsk_send "$@" "bitrix/backup/ bitrix/cache/ bitrix/managed_cache/ bitrix/php_interface/dbconn.php bitrix/.settings.php"
};
dsk(){
    if [ -n "$1" ]; then
      case "$1" in
        "info")    _dsk_info;;
        "size")    [ -n "$2" ] && _dsk_size "$2";;
        "save")    [ -n "$2" ] && _dsk_save "$2";;
        "tar")     [ -n "$2" ] && _dsk_tar "$2";;
        "gz")      [ -n "$2" ] && _dsk_gz "$2";;
        "zip")     [ -n "$2" ] && _dsk_zip "$2";;
        "unpack")  [ -n "$2" ] && _dsk_unpack "$2";;
        "send")    _dsk_send "$@";;
        "send-bx1") _dsk_send_bx1 "$@";;
        "send-bx2") _dsk_send_bx2 "$@";;
        "free") _dsk_online;;
        *) _dsk_help $FUNCNAME;;
       esac 
    else
      _dsk_help $FUNCNAME;
    fi
};

_ngx_title(){ echo -e "\n$(tput setaf 6)Usage: ngx help$(tput sgr0)\n"; };
_ngx_help() { echo -e "
~/.strong_aliases Nginx wrapper function.

 Usage:
  $1 [sites|logs|ssl]       : (grep)      grep keywords in /etc/nginx
  $1 build                  : (nginx)     configure options list
  $1 reload                 : (nginx)     test configuration && reload   
  $1 make dhparam           : (openssl)   make to this directory dhparam.pem 
  $1 make certkey           : (openssl)   make to this directory cert.pem (self-signed 10years cert + key)

 Examples:
  $1 -V  OR   $1 build | grep ip 
  $1 -t  AND  $1 -s reload 
"; }; 
_ngx_build() { nginx -V 2>&1 | grep 'configure' | sed 's/--/\n--/g'; }; 
_ngx_select() { echo "awk '{print \"\033[1;36m\"\$1\"\033[0m\", \"\033[1;31m\"\$$1\"\033[0m\"}'"; }; 
_ngx_grep() { echo; grep --include=*.conf -iRnE $1 /etc/nginx | grep -E 'enabled|-sites' | grep -vE 'pool_manager|server_status|rtc-server' | eval $(_ngx_select $2); echo; }; 
_ngx_make(){ 
  if [ -n "$1" ]; then
    case "$1" in
      "dhparam") openssl dhparam -out dhparam.pem 2048  && echo -e "\n ssl_dhparam $(pwd)/dhparam.pem;\n";;
      "certkey") openssl req -x509 -batch -nodes -days 3650 -newkey rsa:2048 -keyout cert.pem -out cert.pem && echo -e "\n ssl_certificate $(pwd)/cert.pem;\n ssl_certificate_key $(pwd)/cert.pem;\n";;
      *) ;; 
    esac
  else
    echo "Make a choice.. Usage: ngx help "
  fi
};
ngx(){
  if [ -n "$1" ]; then
    case "$1" in
      "sites")       _ngx_grep 'set\s+\$docroot|set\s+\$root_path' "4";;
      "logs")        _ngx_grep "access_log|error_log" "3";;
      "ssl")         _ngx_grep 'ssl_cert' "2";;
      "build")       _ngx_build;;
      "reload")      nginx -t && nginx -s reload;;
      "make")        [ "$#" -ge 2 ] && _ngx_make $2;;
      "help")        _ngx_help $FUNCNAME;;
      *)             _ngx_title && nginx "$@";;
    esac
  else
    _ngx_help $FUNCNAME;
  fi
};

_net_server(){ echo "http://$(curl -s ifconfig.me):$1"; python3 -m http.server $1; };
_net_ip(){ echo -e "\n$(tput setaf 6)EXTERNAL IP $(tput sgr0) $(curl -s ifconfig.me)\n\n$(tput setaf 6)LOCAL IP \n $(ip -c -br a)\n"; };
_net_ports(){ iptables -L -n | grep ACCEPT | grep tcp | awk -F " " '{print $7}' | awk -F ":" '{print $2}' | sort -nu | tr '\n' ' ' | tr '\t' ' '; };
_net_ddos(){ netstat -ntu|awk '{print $5}'|cut -d: -f1 -s|sort|uniq -c|sort -nk1 -r; };
_net_ciphers(){ nmap --script ssl-enum-ciphers -p 443 $1; };
_net_banned(){ iptables -L -n | grep REJECT | awk -F " " '{print $4}' | grep -v '^0.0.0.0'; };
_net_unban(){ fail2ban-client unban $1; };
_net_expiringssl(){ echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -enddate; };
_net_exec_python(){
  SCRIPT_URL=$1
  PYTHON_NEED=$2
  PYTHON_TWO="false"
  PYTHON_THREE="false"
  if command -v python &> /dev/null; then
    PYTHON_TWO="true"
  elif command -v python3 &> /dev/null; then
    PYTHON_THREE="true" 
  else
      echo -e "\nPython not found.\n";
      exit 1
  fi
  if [ "$PYTHON_NEED" == "python"    ] && [ "$PYTHON_TWO"   == "true"  ]; then
    PYTHON_VER="python"
  elif [ "$PYTHON_NEED" == "python3" ] && [ "$PYTHON_THREE" == "true"  ]; then
    PYTHON_VER="python3"
  elif [ "$PYTHON_NEED" == "python"  ] && [ "$PYTHON_TWO"   == "false" ] && [ "$PYTHON_THREE" == "true" ]; then
    PYTHON_VER="python3"
  elif [ "$PYTHON_NEED" == "python3" ] && [ "$PYTHON_THREE" == "false" ] && [ "$PYTHON_TWO" == "true" ]; then
    PYTHON_VER="python"
  else
    echo -e "\nPython not found 2. $PYTHON_VER\n";
  fi
  curl -sSL $SCRIPT_URL | $PYTHON_VER -
};
_net_exec(){ 
  if [ -n "$1" ]; then
    case "$1" in
       "ram-counter")         _net_exec_python $RAM_COUNTER_URL "python";;
       "sql-tuning")          curl -sSL $MYSQL_TUNING_URL | bash -s;;
      *) echo "Make a choice. Use: net help";; 
    esac 
  else
    echo "Make a choice. Use: net help";
  fi
};
_net_get_utils(){
  PATH_UTILS="/root/utils/"; mkdir -p $PATH_UTILS;
  wget -q -O - $UTILS_BACKUP    > $PATH_UTILS/backup.sh;
  echo -e "\n$(tput setaf 6)Files downloaded..$(tput sgr0)\n";
  chmod +x /root/utils/*; ls -R /root/utils; 
};
_net_get(){ 
  if [ -n "$1" ]; then
    case "$1" in
       "utils") _net_get_utils;;
       *) echo "Make a choice. Use: net help";; 
    esac 
  else
    echo "Make a choice. Use: net help";
  fi
};
_net_help(){
 echo -e "\n~/.strong_aliases function. Network Toolkit (netstat, ip, nmap, nc, iptables, openssl)\n
Usage: 
  $1 stat <string>          :  (netstat -nlpt) OR (netstat -nlptx | grep string)
  $1 server <port>          :  (python3 -m http.server <port>)  port default: 6789
  $1 ddos                   :  (netstat)  show active connections of unique IP addresses 
  $1 ports                  :  (iptables) show open ports                                
  $1 ls                     :  (ss)       show listening ports                                
  $1 ip                     :  (ip a)     show local + external IP addresses             
  $1 banned                 :  (iptables) show list banned IP addresses                  
  $1 unban   [IP]           :  (fail2ban) unban IP address in all jails and database     
  $1 ciphers [host]         :  (nmap)     show supported ciphersnmap             
  $1 expssl  [host]         :  (openssl)  show certificate expiration date             
  $1 rand    <length>       :  (openssl)  generating a password of a specified length (default: 9)           
  $1 status  [host] [port]  :  (nc)       report port connection status
  
  $1 get utils              : (wget) download scripts and configs to /root/utils
  
  $1 exec [scenario]        : (curl) exec without save by URL
  $1 exec ram-counter       :  - / -  https://github.com/pixelb/ps_mem/blob/master/ps_mem.py 
  $1 exec sql-tuning        :  - / -  https://github.com/BMDan/tuning-primer.sh/blob/main/tuning-primer.sh


";
};
net(){
  if [ -n "$1" ]; then
    case "$1" in
      "ddos")        _net_ddos;;
      "ports")       echo && _net_ports && echo;;
      "ls")          ss -tln | awk '{print $4}' | grep -o '[0-9]*$' | sort -nu | tr '\n' ' ';;
      "banned")      _net_banned;;
      "unban")       _net_unban "$2";;
      "stat")        [ -n "$2" ] &&  netstat -nlptx | grep "$2" || netstat -nlpt;; 
      "server")      [ -n "$2" ] && _net_server "$2" || _net_server "6789";;
      "ip")          _net_ip;;
      "ciphers")     _net_ciphers "$2";;
      "expssl")      _net_expiringssl "$2";;
      "status")      [ $# -ge 3 ] && nc -zv $2 $3;;
      "exec")        _net_exec "${@:2}";;
      "install")     [ $# -ge 3 ] && _net_install "$2" "$3";;
      "get")         [ -n "$2" ] && _net_get "$2";;
      "rand")        [ -n "$2" ] && openssl rand -base64 "$2" || openssl rand -base64 9;;
      *)             _net_help "$FUNCNAME";; 
    esac 
  else
    _net_help "$FUNCNAME";
  fi
};

_sql_title(){ echo -e "\n$(tput setaf 6)Usage: sql help$(tput sgr0)\n\n"; }; 
_sql_memory(){ IDS=($(find "/proc/$(ps aux | grep $1 | grep -v grep | awk '{print $2}')/task" -maxdepth 1 -type d ! -name 'task' -exec basename {} \;)); MEMORY=0; for ID in "${IDS[@]}"; do MEMORY=$(expr $(ps -o rss= -p $ID) + $MEMORY); done; echo $((MEMORY / 1024)); }; 
_sql_dbsize(){ mysql -e 'SELECT table_schema AS `Database`, ROUND(SUM(data_length + index_length) / 1024 / 1024) AS `Size (MB)` FROM information_schema.tables GROUP BY table_schema HAVING `Size (MB)` >= 0 UNION SELECT schema_name AS `Database`, 0 AS `Size (MB)` FROM information_schema.schemata WHERE schema_name NOT IN (SELECT table_schema FROM information_schema.tables) ORDER BY `Size (MB)` DESC;'; }; 
_sql_tables(){ mysql -e "SELECT table_name, COUNT(*) AS row_count FROM information_schema.tables WHERE table_schema = '$1' GROUP BY table_name ORDER BY row_count ASC;"; }; 
_sql_makezabbix(){ PASSWORD=$(openssl rand -base64 12); mysql -e "DROP USER IF EXISTS 'zabbix'@'localhost'; DROP USER IF EXISTS 'zabbix'@'127.0.0.1'; CREATE USER 'zabbix'@'localhost' IDENTIFIED BY '$PASSWORD';CREATE USER 'zabbix'@'127.0.0.1' IDENTIFIED BY '$PASSWORD'; GRANT ALL ON *.* TO 'zabbix'@'localhost';GRANT ALL ON *.* TO 'zabbix'@'127.0.0.1';flush privileges;"; mkdir -p /etc/zabbix; echo -e "[client]\nuser=zabbix\npassword=$PASSWORD" > /etc/zabbix/.my.cnf;cat /etc/zabbix/.my.cnf; };
_sql_makebareos(){ PASSWORD=$(openssl rand -base64 12); mysql -e "DROP USER IF EXISTS 'bareos'@'localhost'; CREATE USER 'bareos'@'localhost' IDENTIFIED BY '$PASSWORD'; GRANT USAGE ON *.* TO 'bareos'@'localhost'; GRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, PROCESS, EXECUTE, TRIGGER ON *.* TO 'bareos'@'localhost'; FLUSH PRIVILEGES;"; echo -e "[client]\nusername=bareos\npassword=$PASSWORD" > /root/.bareos.cnf;cat /root/.bareos.cnf; };
_sql_help(){ echo "
~/.strong_aliases function. Mysql Toolkit (mysql, mysqldump).

Usage:
 $1 memory                  : show RAM Mysql usage
 $1 bases                   : show databases with size
 $1 create [dbname]         : create database
 $1 base   [dbname]         : show database owners
 $1 tables [dbname]         : show database tables 
 $1 drop   [dbname]         : drop database 
 $1 dump   [dbname]         : dump database to this directory on \"[dbname].sql\"
 $1 clone  [dbname] [newdb] : create database \"newdb\" + copy database \"dbname\" to \"newdb\" 
  
 $1 users                                        : show users
 $1 makeowner  [user]<@host> [password] [dbname] : create user + grant all privileges on the db
 $1 makereader [user]<@host> [password] [dbname] : create user + grant select         on the db
 $1 user       [user]<@host>                     : show user grants 
 $1 password   [user]<@host> [password]          : reset user password
 $1 dropuser   [user]<@host>                     : drop user
 
 $1 makezabbix  : create mysql zabbix user + write access to /etc/zabbix/.my.cnf
 $1 makebareos  : create mysql bareos user + write access to /root/.bareos.cnf
 $1 tuning      : running a script from the repository https://github.com/BMDan/tuning-primer.sh

 "; };

# $1 createuser  [user]@host [password]           : create user
# $1 grantall    [user]@host [dbname]             : grant all privileges to the user on the db 

sql(){
  MESSAGE_CAPTCHA="WARNING!!! Enter \"DROP\" to drop database: ";
  if ! mysql -e "SELECT 1;" &>/dev/null; then
    echo "Password required, file /root/.my.cnf may not be found. Using the function in this mode is not possible."
  else
    if [ $# -eq 0 ]; then
        #_sql_title && mysql;
        _sql_help $FUNCNAME;
    else
      case "$1" in
      "memory")    echo -e "\nUsage RAM: $(_sql_memory "mysql") (mb)\n";;
      "bases")     _sql_dbsize;;
      "create")    [ -n "$2" ] && mysql -e "CREATE DATABASE $2;";;
      "base")      [ -n "$2" ] && mysql -e "SELECT user, host, db FROM mysql.db WHERE db = '$2';";;
      "tables")    _sql_tables "$2";;
      "variables") _sql_variables;;
      "drop")   [ -n "$2" ] && read -p "$MESSAGE_CAPTCHA" captcha && [ "$captcha" = "DROP" ] && mysql -e "DROP DATABASE $2;" && sql bases || echo "FALSE";;
      "dump")     [ -n "$2" ] && mysqldump "$2" > "$2.sql";;
      #"copy")     [ $# -ge 3 ] && mysql -e "DROP DATABASE IF EXISTS $3; CREATE DATABASE $3;"; mysqldump "$2" | mysql "$3";;
      "clone")     [ $# -ge 3 ] && mysql -e "CREATE DATABASE $3;"; mysqldump "$2" | mysql "$3";;
      "users")  mysql -e "SELECT USER,Host FROM mysql.user;";;
      "makeowner")  [ $# -ge 4 ] && mysql -e "CREATE USER $2 IDENTIFIED BY '$3';GRANT ALL PRIVILEGES ON $4 . * TO $2;FLUSH PRIVILEGES;";;
      "makereader") [ $# -ge 4 ] && mysql -e "CREATE USER $2 IDENTIFIED BY '$3';GRANT SELECT ON $4 . * TO $2;FLUSH PRIVILEGES;";;
      #"createuser") [ $# -ge 3 ] && mysql -e "CREATE USER $2 IDENTIFIED BY '$3';";;
      #"grantall") [ $# -ge 3 ] && mysql -e "GRANT ALL PRIVILEGES ON $3 . * TO $2;FLUSH PRIVILEGES;";;
      "user")     [ -n "$2" ] && mysql -e "SHOW GRANTS FOR $2;";;
      "password") [ -n "$2" ] && mysql -e "ALTER USER $2 IDENTIFIED BY '$3';";;
      "dropuser") [ -n "$2" ] && mysql -e "DROP USER $2;";;
      "tuning")   curl -L $MYSQL_TUNING_URL | bash;;
      "makezabbix") _sql_makezabbix;;
      "makebareos") _sql_makebareos;;
      "help")     _sql_help $FUNCNAME;;
      *)          _sql_title && mysql "$@";;
      esac
    fi
  fi
};
